// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using assignment.Data;

#nullable disable

namespace assignment.Data.Migartions
{
    [DbContext(typeof(ITIDbContext))]
    [Migration("20250225091226_RelationshipsBetweenTables")]
    partial class RelationshipsBetweenTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("assignment.Models.CourseInstructor", b =>
                {
                    b.Property<int>("Instructor_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Instructor_Id"));

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int?>("courseId")
                        .HasColumnType("int");

                    b.Property<int>("course_Id")
                        .HasColumnType("int");

                    b.Property<int>("evaluate")
                        .HasColumnType("int");

                    b.HasKey("Instructor_Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("courseId");

                    b.ToTable("CourseInstructor");
                });

            modelBuilder.Entity("assignment.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("HiringDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("assignment.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Department_Id")
                        .HasColumnType("int");

                    b.Property<double?>("HourRate")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("InstructorName");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<double?>("bouns")
                        .HasColumnType("float");

                    b.Property<double>("salary")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Department_Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("assignment.Models.StudCourse", b =>
                {
                    b.Property<int>("Student_Id")
                        .HasColumnType("int");

                    b.Property<int>("course_Id")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int")
                        .HasColumnName("StudentGrade");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("courseId")
                        .HasColumnType("int");

                    b.HasKey("Student_Id", "course_Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("courseId");

                    b.ToTable("StudentCourse");
                });

            modelBuilder.Entity("assignment.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("dep_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("dep_id");

                    b.ToTable("students");
                });

            modelBuilder.Entity("assignment.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("assignment.Models.course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("CourseName");

                    b.Property<int>("Topic_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Topic_Id");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("assignment.Models.CourseInstructor", b =>
                {
                    b.HasOne("assignment.Models.Instructor", null)
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId");

                    b.HasOne("assignment.Models.course", null)
                        .WithMany("Instructors")
                        .HasForeignKey("courseId");
                });

            modelBuilder.Entity("assignment.Models.Instructor", b =>
                {
                    b.HasOne("assignment.Models.Department", "Department")
                        .WithMany("Instructors")
                        .HasForeignKey("Department_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("assignment.Models.StudCourse", b =>
                {
                    b.HasOne("assignment.Models.Student", null)
                        .WithMany("courses")
                        .HasForeignKey("StudentId");

                    b.HasOne("assignment.Models.course", null)
                        .WithMany("students")
                        .HasForeignKey("courseId");
                });

            modelBuilder.Entity("assignment.Models.Student", b =>
                {
                    b.HasOne("assignment.Models.Department", "department")
                        .WithMany("students")
                        .HasForeignKey("dep_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("assignment.Models.course", b =>
                {
                    b.HasOne("assignment.Models.Topic", "Topics")
                        .WithMany("courses")
                        .HasForeignKey("Topic_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("assignment.Models.Department", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("students");
                });

            modelBuilder.Entity("assignment.Models.Instructor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("assignment.Models.Student", b =>
                {
                    b.Navigation("courses");
                });

            modelBuilder.Entity("assignment.Models.Topic", b =>
                {
                    b.Navigation("courses");
                });

            modelBuilder.Entity("assignment.Models.course", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("students");
                });
#pragma warning restore 612, 618
        }
    }
}
